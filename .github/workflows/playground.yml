name: Build and Test (Playground)

on:
  push:
    branches: [main]
  pull_request:
    branches: ["*"]
  workflow_dispatch:

env:
  MIX_ENV: test

jobs:
  # this first job is a prerequisite for all the others. 
  # it prebuilds the project, compiles everything, etc, creating artefacts 
  # for the remaining jobs to use
  build-env:
    name: Build CI env
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix: 
        elixir: ["1.13.3"]
        otp: ["24.2.2"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }} 
          otp-version: ${{ matrix.otp }} 

      - name: Restore elixir dependencies cache
        id: mix-cache
        uses: actions/cache@v3
        with:
          path: playground/deps
          key: ${{ runner.os }}-mix-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}

      - name: Restore npm dependencies cache
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: playground/assets/node_modules
          key: ${{ runner.os }}-mix-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/assets/package-lock.json') }}-v2

      - name: Restore cypress binary cache
        id: cypress-cache
        uses: actions/cache@v3
        with:
          path: /home/runner/.cache/Cypress
          key: cypress-${{ runner.os }}-mix-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/assets/package-lock.json') }}-v2

      - name: Restore build cache
        id: build-cache
        uses: actions/cache@v3
        with:
          path: playground/_build
          key: cache-${{ runner.os }}-dialyzer_build-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}-v2
      
      - name: Install NPM Dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true' || steps.cypress-cache.outputs.cache-hit != 'true'
        working-directory: playground
        run: npm --prefix assets ci

      # check the Cypress binary
      - name: Check cypress binary
        working-directory: playground
        run: |
          npx cypress cache path
          npx cypress cache list

      - name: Install Mix Dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        working-directory: playground
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Compile Test
        env:
          MIX_ENV: test
        working-directory: playground
        run: mix deps.compile; mix compile --force --warnings-as-errors

      - name: Compile Dev
        env:
          MIX_ENV: dev
        working-directory: playground
        run: mix deps.compile; mix compile --force --warnings-as-errors
           
      - name: Create Artifacts
        run: |
          mkdir -p $GITHUB_WORKSPACE/artifacts
          tar czf $GITHUB_WORKSPACE/artifacts/build.tgz --directory=playground/_build/ .
          tar czf $GITHUB_WORKSPACE/artifacts/deps.tgz --directory=playground/deps .
          tar czf $GITHUB_WORKSPACE/artifacts/node_modules.tgz --directory=playground/assets/node_modules/ .
          tar czf $GITHUB_WORKSPACE/artifacts/cypress.tgz --directory=/home/runner/.cache/Cypress .
          tar czf $GITHUB_WORKSPACE/artifacts/static.tgz --directory=playground/priv/static/ .

      - uses: "actions/upload-artifact@v2"
        with:
          name: build-env
          path: "${{ github.workspace }}/artifacts"
          retention-days: 1

  # checks elixir formatting and runs credo
  formatter-credo:
    name: "Formatter & Credo"
    runs-on: "ubuntu-latest"
    needs: build-env
    env:
      MIX_ENV: test
    strategy: 
      fail-fast: true
      matrix: 
        elixir: ["1.13.3"]
        otp: ["24.2.2"]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }} # Define the elixir version [required]
          otp-version: ${{ matrix.otp }} # Define the OTP version [required]
      - name: Install Rebar / Hex
        run: |
          mix local.rebar --force
          mix local.hex --force

      - name: Download artifacts
        uses: "actions/download-artifact@v2"
        with:
          name: build-env
          path: "${{ github.workspace }}/artifacts"

      - name: Extract Artifacts
        working-directory: playground
        run: |
          mkdir -p ./_build
          mkdir -p ./deps
          tar xzf $GITHUB_WORKSPACE/artifacts/build.tgz --directory=./_build
          tar xzf $GITHUB_WORKSPACE/artifacts/deps.tgz --directory=./deps

      - name: Check Formatting
        working-directory: playground
        run: mix format --check-formatted

      - name: Run Credo
        working-directory: playground
        run: mix credo --strict
  
  # runs eslint on ts/js code
  lint:
    name: "Lint"
    runs-on: "ubuntu-latest"
    needs: build-env
    steps:
      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: "actions/download-artifact@v2"
        with:
          name: build-env
          path: "${{ github.workspace }}/artifacts"
      - name: Extract Artifacts
        working-directory: playground
        run: |
          mkdir -p ./assets/node_modules
          tar xzf $GITHUB_WORKSPACE/artifacts/node_modules.tgz --directory=./assets/node_modules

      - name: Run Eslint
        working-directory: playground
        run: npm --prefix assets run lint
  
  # runs elixir unit tests
  unit:
    name: "Unit tests"
    runs-on: "ubuntu-latest"
    needs: build-env
    env:
      MIX_ENV: test
    strategy: 
      fail-fast: true
      matrix: 
        elixir: ["1.13.3"]
        otp: ["24.2.2"]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }} 
          otp-version: ${{ matrix.otp }} 

      - name: Install Rebar / Hex
        working-directory: playground
        run: |
          mix local.rebar --force
          mix local.hex --force

      - name: Download Artifacts
        uses: "actions/download-artifact@v2"
        with:
          name: build-env
          path: "${{ github.workspace }}/artifacts"
      
      - name: Extract Artifacts
        working-directory: playground
        run: |
          mkdir -p ./_build
          mkdir -p ./deps
          mkdir -p ./assets/node_modules
          mkdir -p ./priv/static
          tar xzf $GITHUB_WORKSPACE/artifacts/build.tgz --directory=./_build
          tar xzf $GITHUB_WORKSPACE/artifacts/deps.tgz --directory=./deps
          tar xzf $GITHUB_WORKSPACE/artifacts/static.tgz --directory=./priv/static
      
      - name: Run Unit Tests
        working-directory: playground
        run: mix test
  
  # runs dialyzer
  dialyzer:
    name: "Run dialyzer"
    runs-on: "ubuntu-latest"
    needs: build-env
    strategy: 
      fail-fast: true
      matrix: 
        elixir: ["1.13.3"]
        otp: ["24.2.2"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }} 
          otp-version: ${{ matrix.otp }}
          
      - name: Install Rebar / Hex
        working-directory: playground
        run: |
          mix local.rebar --force
          mix local.hex --force

      - name: Download Artifacts
        uses: "actions/download-artifact@v2"
        with:
          name: build-env
          path: "${{ github.workspace }}/artifacts"
      
      - name: Extract Artifacts
        working-directory: playground
        run: |
          mkdir -p ./_build
          mkdir -p ./deps
          tar xzf $GITHUB_WORKSPACE/artifacts/build.tgz --directory=./_build
          tar xzf $GITHUB_WORKSPACE/artifacts/deps.tgz --directory=./deps

      # the PLT cache is only needed by dialyzer, so it's fully handled by this one job
      - name: Retrieve PLT Cache
        uses: actions/cache@v3
        id: plt-cache
        with:
          path: priv/plts
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plts-${{ hashFiles('**/mix.lock') }}
      
      - name: Create PLTs
        if: steps.plt-cache.outputs.cache-hit != 'true'
        working-directory: playground
        run: |
          mkdir -p priv/plts
          mix dialyzer --plt

      - name: Run dialyzer
        working-directory: playground
        run: mix dialyzer --halt-exit-status

  # runs cypress acceptance/e2e tests
  acceptance:
    name: "Acceptance/E2E tests"
    runs-on: "ubuntu-latest"
    needs: build-env
    env: 
      MIX_ENV: dev
    strategy: 
      fail-fast: true
      matrix: 
        elixir: ["1.13.3"]
        otp: ["24.2.2"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }} 
          otp-version: ${{ matrix.otp }}
          
      - name: Install Rebar / Hex
        working-directory: playground
        run: |
          mix local.rebar --force
          mix local.hex --force

      - name: Download Artifacts
        uses: "actions/download-artifact@v2"
        with:
          name: build-env
          path: "${{ github.workspace }}/artifacts"
      
      - name: Extract Artifacts
        working-directory: playground
        run: |
          mkdir -p ./_build
          mkdir -p ./deps
          mkdir -p ./assets/node_modules
          mkdir -p /home/runner/.cache/Cypress
          mkdir -p ./priv/static
          tar xzf $GITHUB_WORKSPACE/artifacts/build.tgz --directory=./_build
          tar xzf $GITHUB_WORKSPACE/artifacts/deps.tgz --directory=./deps
          tar xzf $GITHUB_WORKSPACE/artifacts/node_modules.tgz --directory=./assets/node_modules
          tar xzf $GITHUB_WORKSPACE/artifacts/cypress.tgz --directory=/home/runner/.cache/Cypress
          tar xzf $GITHUB_WORKSPACE/artifacts/static.tgz --directory=./priv/static
      
      - name: E2E tests
        working-directory: playground
        run: |
          mix phx.server &
          npm --prefix assets run test:e2e:ci

      
